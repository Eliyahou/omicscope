.. role:: raw-html-m2r(raw)
   :format: html


{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(1, 'C:/Users/Guilherme/omicscope/omicscope/src/')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Input \n",
    "\n",
    "\ *OmicScope* have four methods to input data into its pipeline, of which three are based on proteomic software that performs protein identification and quantitation. The methods are:\n",
    "\n",
    "\ * **Progenesis QI for proteomics** *\ (Method = 'Progenesis')\ *: while associated with ProteinLynx Global Server (PLGS), Progenesis is a software that allows both proteins quantitation and identification of experiments that performed Data Independente Acquisition (DIA).  \n",
    "\n",
    "* **PatternLab V** *(Method = 'PatternLab')*\ : PatternLab V is an integrated computational environment for analyzing shotgun proteomic data, being considered one of the best options to perform quantitative proteomics from data-dependent acquisition, since its high confidence parameters for protein quantitation and identification.\n",
    "\n",
    "\ * **MaxQuant** *\ (Method = 'MaxQuant')\ *: MaxQuant is the most used software for quantitative proteomics, offering users several parameter options to run quantitative analysis.\n",
    "\n",
    "* **General** *(Method = 'General')*\ : A generic input method, in which users must use an Excel file to specify the quantitative values (sheet1 = assay), protein features (sheet2 = rdata), and sample information (sheet3 = pdata)."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import OmicScope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OmicScope v 1.0.0 For help: Insert\n",
      "If you use  in published research, please cite: 'lallalala'\n",
      "Reis-de-Oliveira G, Martins-de-Souza D. OmicScope: an Comprehensive Python library for Systems Biology Visualization.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import omicscope as omics"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Progenesis QI for Proteomics\n",
    "\n",
    "Progenesis exports a .csv extension file, which contains information regarding samples, proteins and quantitative values. For the Progenesis workflow, *OmicScope* imports this files and extract abundance levels of each protein (assay), the features of each protein (rdata), and features of each sample (pdata). \n",
    "\n",
    "\ **OBS:** Since Progenesis performs differential proteomics, OmicScope take into account the statistical analysis performed by Progenesis; however, if user have an specific experimental design and needs OmicScope Statistical Workflow, user have to rewrite in the original .csv file:\n",
    "\ * \"Anova (p)\" --> \"Original Anova (p)\" \n",
    "* \"q Value\" --> \"Original q Value\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User already performed statistical analysis\n"
     ]
    }
   ],
   "source": [
    "progenesis = omics.OmicScope('../tests/data/proteins/progenesis.csv', Method = 'Progenesis')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since Progenesis do not export all information regarding samples, OmicScope allows user to input an Excel file containing all information regarding samples. This file will be used to categorize samples, perform statistical analysis, and generate figures. Additionally, users can filter data based on the minimum number of unique peptides adding to parameter function 'UniquePeptides' (suggestion: UniquePeptides = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User already performed statistical analysis\n"
     ]
    }
   ],
   "source": [
    "progenesis = omics.OmicScope('../tests/data/proteins/progenesis.csv', Method = 'Progenesis',\n",
    " pdata = '../tests/data/proteins/progenesis_pdata.xls', UniquePeptides = 1)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PatternLab\n",
    "\n",
    "PatternLab exports an Excel file (.xlsx extension), containing in general the same information as Progenesis: assay, pdata and rdata. However, in this export there is no differential proteomics statistics, then OmicScope will automatically perform statistical analysis. Despite users can filter proteins manually excel file, OmicScope **requires** 'filtering_method' parameter to filter and quantify the identified proteins. OmicScope filters proteins based on 1) percentage of times that an protein was identified among samples (insert an integer number); or 2) exclude proteins that was identified at least in 2 samples per group (insert 'minimum')."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\Users/Guilherme/omicscope/omicscope/src\omicscope\Omicscope.py:134: FutureWarning: In a future version, the Index constructor will not infer numeric dtypes when passed object-dtype sequences (matching Series behavior)\n",
      "  expression = expression.set_index(pdata).T\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Anova test was performed!\n",
      "OmicScope performed statistical analysis (Static workflow)\n"
     ]
    }
   ],
   "source": [
    "plv = omics.OmicScope('../tests/data/proteins/patternlab.xlsx', Method = 'PatternLab', filtering_method = 70)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MaxQuant\n",
    "\n",
    "MaxQuant exports a **proteinGroups** file (.txt extension), containing a comprehensive description of assay and rdata. Due to missing pdata, MaxQuant workflow is **requires** 'filtering_method' parameter and an Excel file for pdata. OmicScope filters proteins based on 1) percentage of times that an protein was identified among samples (insert an integer number); or 2) exclude proteins that was identified at least in 2 samples per group (insert 'minimum')."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Anova test was performed!\n",
      "OmicScope performed statistical analysis (Static workflow)\n"
     ]
    }
   ],
   "source": [
    "maxquant = omics.OmicScope('../tests/data/proteins/MQ.txt', Method='MaxQuant',\n",
    "            pdata='../tests/data/proteins/MQ_pdata.xlsx', filtering_method=70)\n",
    "            "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## General\n",
    "\n",
    "General workflow allows user to analyse data generated in other plataforms, even for Transcriptomics and Metabolomics. For that, users have to organize an Excel file in three (3) sheets containing, respectivelly, assay, rdata and pdata. \n",
    "\n",
    "\ **Assay** contains abundance of the N proteins (rows) among M samples (columns); **Rdata** has N proteins (rows) with their respective features among columns; **Pdata** has M samples (rows) with their respective characteristics (such as conditions, biological and technical replicates).\n",
    "\n",
    "The following sections shows examples of how each sheet must be described."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Independent T-test was carried out!\n",
      "OmicScope performed statistical analysis (Static workflow)\n"
     ]
    }
   ],
   "source": [
    "general = omics.OmicScope('../tests/data/proteins/general.xls', Method='General')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\ :raw-html-m2r:`<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VCC_KO_1_VINO</th>\n",
       "      <th>VCC_KO_1_VINO_2</th>\n",
       "      <th>VCC_KO_1_VINO_29102021</th>\n",
       "      <th>VCC_KO_1_VINO_29102021_3</th>\n",
       "      <th>VCC_KO_2_VINO</th>\n",
       "      <th>VCC_KO_2_VINO_2</th>\n",
       "      <th>VCC_KO_2_VINO_29102021</th>\n",
       "      <th>VCC_KO_2_VINO_29102021_3</th>\n",
       "      <th>VCC_KO_3_VINO</th>\n",
       "      <th>VCC_KO_3_VINO_2</th>\n",
       "      <th>...</th>\n",
       "      <th>VCC_WT_2_VIN_29102021</th>\n",
       "      <th>VCC_WT_2_VIN_29102021_2</th>\n",
       "      <th>VCC_WT_3_VIN</th>\n",
       "      <th>VCC_WT_3_VIN_2</th>\n",
       "      <th>VCC_WT_3_VIN_29102021</th>\n",
       "      <th>VCC_WT_3_VIN_29102021_2</th>\n",
       "      <th>VCC_WT_4_VIN</th>\n",
       "      <th>VCC_WT_4_VIN_2</th>\n",
       "      <th>VCC_WT_4_VIN_29102021</th>\n",
       "      <th>VCC_WT_4_VIN_29102021_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>61282.526104</td>\n",
       "      <td>58475.057832</td>\n",
       "      <td>66491.864803</td>\n",
       "      <td>63965.456771</td>\n",
       "      <td>58599.602771</td>\n",
       "      <td>58349.651075</td>\n",
       "      <td>61126.678243</td>\n",
       "      <td>61396.041785</td>\n",
       "      <td>55983.435295</td>\n",
       "      <td>55382.566170</td>\n",
       "      <td>...</td>\n",
       "      <td>82171.713393</td>\n",
       "      <td>86964.333856</td>\n",
       "      <td>83896.220644</td>\n",
       "      <td>85960.705463</td>\n",
       "      <td>123508.762577</td>\n",
       "      <td>77645.954774</td>\n",
       "      <td>83303.856481</td>\n",
       "      <td>87632.085234</td>\n",
       "      <td>78080.558618</td>\n",
       "      <td>81497.447186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48284.094432</td>\n",
       "      <td>51659.072375</td>\n",
       "      <td>48700.892150</td>\n",
       "      <td>55211.947643</td>\n",
       "      <td>51033.426081</td>\n",
       "      <td>50100.916082</td>\n",
       "      <td>54566.724267</td>\n",
       "      <td>50468.832724</td>\n",
       "      <td>54797.997214</td>\n",
       "      <td>52039.446331</td>\n",
       "      <td>...</td>\n",
       "      <td>58684.503206</td>\n",
       "      <td>71913.438722</td>\n",
       "      <td>71047.636656</td>\n",
       "      <td>71125.976724</td>\n",
       "      <td>53174.444736</td>\n",
       "      <td>79038.061177</td>\n",
       "      <td>67214.986877</td>\n",
       "      <td>68608.124964</td>\n",
       "      <td>65715.209981</td>\n",
       "      <td>75314.101558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8275.498103</td>\n",
       "      <td>7672.835670</td>\n",
       "      <td>7676.683705</td>\n",
       "      <td>7388.702687</td>\n",
       "      <td>8971.608574</td>\n",
       "      <td>8993.363424</td>\n",
       "      <td>8689.472709</td>\n",
       "      <td>9342.557740</td>\n",
       "      <td>8261.663352</td>\n",
       "      <td>7056.970146</td>\n",
       "      <td>...</td>\n",
       "      <td>33309.128490</td>\n",
       "      <td>17392.234792</td>\n",
       "      <td>10650.392858</td>\n",
       "      <td>10640.789093</td>\n",
       "      <td>14516.837540</td>\n",
       "      <td>12384.828169</td>\n",
       "      <td>20016.681999</td>\n",
       "      <td>18983.880260</td>\n",
       "      <td>19210.197630</td>\n",
       "      <td>16118.917424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>283603.747996</td>\n",
       "      <td>275358.163322</td>\n",
       "      <td>264519.003841</td>\n",
       "      <td>322882.142746</td>\n",
       "      <td>200863.590415</td>\n",
       "      <td>222174.322464</td>\n",
       "      <td>200538.991041</td>\n",
       "      <td>266430.806302</td>\n",
       "      <td>201782.520396</td>\n",
       "      <td>174000.923670</td>\n",
       "      <td>...</td>\n",
       "      <td>898091.979181</td>\n",
       "      <td>686655.971644</td>\n",
       "      <td>420550.143562</td>\n",
       "      <td>401333.316279</td>\n",
       "      <td>552460.098385</td>\n",
       "      <td>529880.936082</td>\n",
       "      <td>438354.668416</td>\n",
       "      <td>419538.761093</td>\n",
       "      <td>487150.346242</td>\n",
       "      <td>328164.625834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>87324.461931</td>\n",
       "      <td>93193.890073</td>\n",
       "      <td>87119.771902</td>\n",
       "      <td>92960.354306</td>\n",
       "      <td>63819.952903</td>\n",
       "      <td>71969.767523</td>\n",
       "      <td>66863.673529</td>\n",
       "      <td>67127.229702</td>\n",
       "      <td>84533.473807</td>\n",
       "      <td>90097.134209</td>\n",
       "      <td>...</td>\n",
       "      <td>135941.135022</td>\n",
       "      <td>88903.637078</td>\n",
       "      <td>150594.063275</td>\n",
       "      <td>128800.719644</td>\n",
       "      <td>105642.253308</td>\n",
       "      <td>127004.578001</td>\n",
       "      <td>131777.765141</td>\n",
       "      <td>129648.706863</td>\n",
       "      <td>112132.161616</td>\n",
       "      <td>91798.715011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625</th>\n",
       "      <td>3041.008709</td>\n",
       "      <td>3324.828994</td>\n",
       "      <td>2395.469265</td>\n",
       "      <td>2308.737050</td>\n",
       "      <td>3024.876139</td>\n",
       "      <td>3307.253531</td>\n",
       "      <td>1482.271672</td>\n",
       "      <td>2080.586651</td>\n",
       "      <td>3404.841525</td>\n",
       "      <td>2913.123049</td>\n",
       "      <td>...</td>\n",
       "      <td>1626.248130</td>\n",
       "      <td>554.882338</td>\n",
       "      <td>3246.652696</td>\n",
       "      <td>3765.351514</td>\n",
       "      <td>1786.243434</td>\n",
       "      <td>590.597996</td>\n",
       "      <td>3119.301412</td>\n",
       "      <td>3526.340539</td>\n",
       "      <td>3128.571684</td>\n",
       "      <td>2227.247013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1626</th>\n",
       "      <td>356867.255801</td>\n",
       "      <td>348689.935124</td>\n",
       "      <td>346851.549311</td>\n",
       "      <td>372927.779495</td>\n",
       "      <td>345165.462002</td>\n",
       "      <td>360979.669247</td>\n",
       "      <td>364735.213928</td>\n",
       "      <td>320466.392034</td>\n",
       "      <td>379752.627090</td>\n",
       "      <td>390026.201243</td>\n",
       "      <td>...</td>\n",
       "      <td>282947.076495</td>\n",
       "      <td>503996.690429</td>\n",
       "      <td>349771.334353</td>\n",
       "      <td>345677.687551</td>\n",
       "      <td>173491.701831</td>\n",
       "      <td>399923.485429</td>\n",
       "      <td>359197.687162</td>\n",
       "      <td>376166.710301</td>\n",
       "      <td>326953.732596</td>\n",
       "      <td>401299.676304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1627</th>\n",
       "      <td>26291.382233</td>\n",
       "      <td>27847.865002</td>\n",
       "      <td>28356.816852</td>\n",
       "      <td>28826.128188</td>\n",
       "      <td>30888.249387</td>\n",
       "      <td>29509.525712</td>\n",
       "      <td>32908.353274</td>\n",
       "      <td>28202.412855</td>\n",
       "      <td>19738.878606</td>\n",
       "      <td>23828.137321</td>\n",
       "      <td>...</td>\n",
       "      <td>9079.839066</td>\n",
       "      <td>27535.650419</td>\n",
       "      <td>26673.002539</td>\n",
       "      <td>25324.427145</td>\n",
       "      <td>9715.138527</td>\n",
       "      <td>31024.734948</td>\n",
       "      <td>28805.776472</td>\n",
       "      <td>28705.478299</td>\n",
       "      <td>19537.250425</td>\n",
       "      <td>33589.138308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1628</th>\n",
       "      <td>373635.872897</td>\n",
       "      <td>374435.718688</td>\n",
       "      <td>425780.144847</td>\n",
       "      <td>414410.635963</td>\n",
       "      <td>321142.352638</td>\n",
       "      <td>372596.419505</td>\n",
       "      <td>425871.626524</td>\n",
       "      <td>355517.091009</td>\n",
       "      <td>314295.114249</td>\n",
       "      <td>346018.826251</td>\n",
       "      <td>...</td>\n",
       "      <td>174652.041234</td>\n",
       "      <td>457759.006886</td>\n",
       "      <td>326655.080904</td>\n",
       "      <td>383970.132213</td>\n",
       "      <td>238890.714726</td>\n",
       "      <td>456183.199148</td>\n",
       "      <td>400575.244035</td>\n",
       "      <td>388277.379826</td>\n",
       "      <td>389082.294175</td>\n",
       "      <td>456536.266350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1629</th>\n",
       "      <td>4364.240925</td>\n",
       "      <td>3584.293089</td>\n",
       "      <td>3645.068279</td>\n",
       "      <td>3990.684871</td>\n",
       "      <td>4012.145214</td>\n",
       "      <td>3629.953428</td>\n",
       "      <td>4386.101259</td>\n",
       "      <td>4647.649644</td>\n",
       "      <td>3009.701602</td>\n",
       "      <td>2356.009793</td>\n",
       "      <td>...</td>\n",
       "      <td>6102.804264</td>\n",
       "      <td>4960.095760</td>\n",
       "      <td>2735.980209</td>\n",
       "      <td>2392.566347</td>\n",
       "      <td>4644.415659</td>\n",
       "      <td>2274.800507</td>\n",
       "      <td>2240.936668</td>\n",
       "      <td>2566.819595</td>\n",
       "      <td>3239.444465</td>\n",
       "      <td>2344.484279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1630 rows × 32 columns</p>\n",
       "</div>`\ "
      ],
      "text/plain": [
       "      VCC_KO_1_VINO  VCC_KO_1_VINO_2  VCC_KO_1_VINO_29102021  \\n",
       "0      61282.526104     58475.057832            66491.864803   \n",
       "1      48284.094432     51659.072375            48700.892150   \n",
       "2       8275.498103      7672.835670             7676.683705   \n",
       "3     283603.747996    275358.163322           264519.003841   \n",
       "4      87324.461931     93193.890073            87119.771902   \n",
       "...             ...              ...                     ...   \n",
       "1625    3041.008709      3324.828994             2395.469265   \n",
       "1626  356867.255801    348689.935124           346851.549311   \n",
       "1627   26291.382233     27847.865002            28356.816852   \n",
       "1628  373635.872897    374435.718688           425780.144847   \n",
       "1629    4364.240925      3584.293089             3645.068279   \n",
       "\n",
       "      VCC_KO_1_VINO_29102021_3  VCC_KO_2_VINO  VCC_KO_2_VINO_2  \\n",
       "0                 63965.456771   58599.602771     58349.651075   \n",
       "1                 55211.947643   51033.426081     50100.916082   \n",
       "2                  7388.702687    8971.608574      8993.363424   \n",
       "3                322882.142746  200863.590415    222174.322464   \n",
       "4                 92960.354306   63819.952903     71969.767523   \n",
       "...                        ...            ...              ...   \n",
       "1625               2308.737050    3024.876139      3307.253531   \n",
       "1626             372927.779495  345165.462002    360979.669247   \n",
       "1627              28826.128188   30888.249387     29509.525712   \n",
       "1628             414410.635963  321142.352638    372596.419505   \n",
       "1629               3990.684871    4012.145214      3629.953428   \n",
       "\n",
       "      VCC_KO_2_VINO_29102021  VCC_KO_2_VINO_29102021_3  VCC_KO_3_VINO  \\n",
       "0               61126.678243              61396.041785   55983.435295   \n",
       "1               54566.724267              50468.832724   54797.997214   \n",
       "2                8689.472709               9342.557740    8261.663352   \n",
       "3              200538.991041             266430.806302  201782.520396   \n",
       "4               66863.673529              67127.229702   84533.473807   \n",
       "...                      ...                       ...            ...   \n",
       "1625             1482.271672               2080.586651    3404.841525   \n",
       "1626           364735.213928             320466.392034  379752.627090   \n",
       "1627            32908.353274              28202.412855   19738.878606   \n",
       "1628           425871.626524             355517.091009  314295.114249   \n",
       "1629             4386.101259               4647.649644    3009.701602   \n",
       "\n",
       "      VCC_KO_3_VINO_2  ...  VCC_WT_2_VIN_29102021  VCC_WT_2_VIN_29102021_2  \\n",
       "0        55382.566170  ...           82171.713393             86964.333856   \n",
       "1        52039.446331  ...           58684.503206             71913.438722   \n",
       "2         7056.970146  ...           33309.128490             17392.234792   \n",
       "3       174000.923670  ...          898091.979181            686655.971644   \n",
       "4        90097.134209  ...          135941.135022             88903.637078   \n",
       "...               ...  ...                    ...                      ...   \n",
       "1625      2913.123049  ...            1626.248130               554.882338   \n",
       "1626    390026.201243  ...          282947.076495            503996.690429   \n",
       "1627     23828.137321  ...            9079.839066             27535.650419   \n",
       "1628    346018.826251  ...          174652.041234            457759.006886   \n",
       "1629      2356.009793  ...            6102.804264              4960.095760   \n",
       "\n",
       "       VCC_WT_3_VIN  VCC_WT_3_VIN_2  VCC_WT_3_VIN_29102021  \\n",
       "0      83896.220644    85960.705463          123508.762577   \n",
       "1      71047.636656    71125.976724           53174.444736   \n",
       "2      10650.392858    10640.789093           14516.837540   \n",
       "3     420550.143562   401333.316279          552460.098385   \n",
       "4     150594.063275   128800.719644          105642.253308   \n",
       "...             ...             ...                    ...   \n",
       "1625    3246.652696     3765.351514            1786.243434   \n",
       "1626  349771.334353   345677.687551          173491.701831   \n",
       "1627   26673.002539    25324.427145            9715.138527   \n",
       "1628  326655.080904   383970.132213          238890.714726   \n",
       "1629    2735.980209     2392.566347            4644.415659   \n",
       "\n",
       "      VCC_WT_3_VIN_29102021_2   VCC_WT_4_VIN  VCC_WT_4_VIN_2  \\n",
       "0                77645.954774   83303.856481    87632.085234   \n",
       "1                79038.061177   67214.986877    68608.124964   \n",
       "2                12384.828169   20016.681999    18983.880260   \n",
       "3               529880.936082  438354.668416   419538.761093   \n",
       "4               127004.578001  131777.765141   129648.706863   \n",
       "...                       ...            ...             ...   \n",
       "1625               590.597996    3119.301412     3526.340539   \n",
       "1626            399923.485429  359197.687162   376166.710301   \n",
       "1627             31024.734948   28805.776472    28705.478299   \n",
       "1628            456183.199148  400575.244035   388277.379826   \n",
       "1629              2274.800507    2240.936668     2566.819595   \n",
       "\n",
       "      VCC_WT_4_VIN_29102021  VCC_WT_4_VIN_29102021_2  \n",
       "0              78080.558618             81497.447186  \n",
       "1              65715.209981             75314.101558  \n",
       "2              19210.197630             16118.917424  \n",
       "3             487150.346242            328164.625834  \n",
       "4             112132.161616             91798.715011  \n",
       "...                     ...                      ...  \n",
       "1625            3128.571684              2227.247013  \n",
       "1626          326953.732596            401299.676304  \n",
       "1627           19537.250425             33589.138308  \n",
       "1628          389082.294175            456536.266350  \n",
       "1629            3239.444465              2344.484279  \n",
       "\n",
       "[1630 rows x 32 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "assay = pd.read_excel('../tests/data/proteins/general.xls', sheet_name=0)\n",
    "assay"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### rdata\n",
    "\n",
    "Rdata need to have at least two columns: 'Accession' and 'Description'.\n",
    "1. 'Accession': is an unique value that represents those proteins in dataframe.\n",
    "2. 'Description': is the fasta header from Uniprot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\ :raw-html-m2r:`<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accession</th>\n",
       "      <th>Peptide count</th>\n",
       "      <th>Unique peptides</th>\n",
       "      <th>Confidence score</th>\n",
       "      <th>Max fold change</th>\n",
       "      <th>Power</th>\n",
       "      <th>Highest mean condition</th>\n",
       "      <th>Lowest mean condition</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Q61823</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>44.7130</td>\n",
       "      <td>1.439696</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Programmed cell death protein 4 OS=Mus musculu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Q91V61</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>30.6978</td>\n",
       "      <td>1.309501</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Sideroflexin-3 OS=Mus musculus OX=10090 GN=Sfx...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Q3TMQ6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12.8896</td>\n",
       "      <td>2.049949</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Angiogenin-4 OS=Mus musculus OX=10090 GN=Ang4 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Q8JZQ2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>27.5190</td>\n",
       "      <td>2.126119</td>\n",
       "      <td>0.999997</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>AFG3-like protein 2 OS=Mus musculus OX=10090 G...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>O89053</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>47.6594</td>\n",
       "      <td>1.459878</td>\n",
       "      <td>0.999993</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Coronin-1A OS=Mus musculus OX=10090 GN=Coro1a ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625</th>\n",
       "      <td>Q7TST0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5.3525</td>\n",
       "      <td>1.119898</td>\n",
       "      <td>0.050005</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Butyrophilin-like protein 1 OS=Mus musculus OX...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1626</th>\n",
       "      <td>P27659</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>194.1972</td>\n",
       "      <td>1.025275</td>\n",
       "      <td>0.050002</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>60S ribosomal protein L3 OS=Mus musculus OX=10...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1627</th>\n",
       "      <td>Q62148</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>33.2507</td>\n",
       "      <td>1.039149</td>\n",
       "      <td>0.050002</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Retinal dehydrogenase 2 OS=Mus musculus OX=100...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1628</th>\n",
       "      <td>J3QM76</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>22.3837</td>\n",
       "      <td>1.021277</td>\n",
       "      <td>0.050001</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Coiled-coil domain-containing protein 179 OS=M...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1629</th>\n",
       "      <td>P63024;P63044</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0456</td>\n",
       "      <td>1.053974</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>WT</td>\n",
       "      <td>KO</td>\n",
       "      <td>Vesicle-associated membrane protein 3 OS=Mus m...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1630 rows × 9 columns</p>\n",
       "</div>`\ "
      ],
      "text/plain": [
       "          Accession  Peptide count  Unique peptides  Confidence score  \\n",
       "0            Q61823              8                1           44.7130   \n",
       "1            Q91V61              6                0           30.6978   \n",
       "2            Q3TMQ6              1                0           12.8896   \n",
       "3            Q8JZQ2              4                1           27.5190   \n",
       "4            O89053              7                3           47.6594   \n",
       "...             ...            ...              ...               ...   \n",
       "1625         Q7TST0              1                0            5.3525   \n",
       "1626         P27659             22                7          194.1972   \n",
       "1627         Q62148              4                1           33.2507   \n",
       "1628         J3QM76              4                0           22.3837   \n",
       "1629  P63024;P63044              2                0           14.0456   \n",
       "\n",
       "      Max fold change     Power Highest mean condition Lowest mean condition  \\n",
       "0            1.439696  1.000000                     WT                    KO   \n",
       "1            1.309501  1.000000                     WT                    KO   \n",
       "2            2.049949  1.000000                     WT                    KO   \n",
       "3            2.126119  0.999997                     WT                    KO   \n",
       "4            1.459878  0.999993                     WT                    KO   \n",
       "...               ...       ...                    ...                   ...   \n",
       "1625         1.119898  0.050005                     WT                    KO   \n",
       "1626         1.025275  0.050002                     WT                    KO   \n",
       "1627         1.039149  0.050002                     WT                    KO   \n",
       "1628         1.021277  0.050001                     WT                    KO   \n",
       "1629         1.053974  0.050000                     WT                    KO   \n",
       "\n",
       "                                            Description  \n",
       "0     Programmed cell death protein 4 OS=Mus musculu...  \n",
       "1     Sideroflexin-3 OS=Mus musculus OX=10090 GN=Sfx...  \n",
       "2     Angiogenin-4 OS=Mus musculus OX=10090 GN=Ang4 ...  \n",
       "3     AFG3-like protein 2 OS=Mus musculus OX=10090 G...  \n",
       "4     Coronin-1A OS=Mus musculus OX=10090 GN=Coro1a ...  \n",
       "...                                                 ...  \n",
       "1625  Butyrophilin-like protein 1 OS=Mus musculus OX...  \n",
       "1626  60S ribosomal protein L3 OS=Mus musculus OX=10...  \n",
       "1627  Retinal dehydrogenase 2 OS=Mus musculus OX=100...  \n",
       "1628  Coiled-coil domain-containing protein 179 OS=M...  \n",
       "1629  Vesicle-associated membrane protein 3 OS=Mus m...  \n",
       "\n",
       "[1630 rows x 9 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rdata = pd.read_excel('../tests/data/proteins/general.xls', sheet_name=1)\n",
    "rdata"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### pdata\n",
    "\n",
    "Pdata presents a description of each sample analysed. Pdata must have at least 3 columns, 'Sample', 'Condition', 'Biological'.\n",
    "\n",
    "1. 'Sample': identifier of each sample analysed\n",
    "2. 'Condition': respective group for each sample.\n",
    "3. 'Biological': respective biological replicate for each sample.\n",
    "\n",
    "While performing longitudinal analysis, users must input 'TimeCourse' column showing day/hour/time associated with respective sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\ :raw-html-m2r:`<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sample</th>\n",
       "      <th>Condition</th>\n",
       "      <th>Biological</th>\n",
       "      <th>TechRep</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>VCC_KO_1_VINO</td>\n",
       "      <td>KO</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>VCC_KO_1_VINO_2</td>\n",
       "      <td>KO</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>VCC_KO_1_VINO_29102021</td>\n",
       "      <td>KO</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VCC_KO_1_VINO_29102021_3</td>\n",
       "      <td>KO</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>VCC_KO_2_VINO</td>\n",
       "      <td>KO</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>VCC_KO_2_VINO_2</td>\n",
       "      <td>KO</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>VCC_KO_2_VINO_29102021</td>\n",
       "      <td>KO</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>VCC_KO_2_VINO_29102021_3</td>\n",
       "      <td>KO</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>VCC_KO_3_VINO</td>\n",
       "      <td>KO</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VCC_KO_3_VINO_2</td>\n",
       "      <td>KO</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>VCC_KO_3_VINO_29102021</td>\n",
       "      <td>KO</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VCC_KO_3_VINO_29102021_3</td>\n",
       "      <td>KO</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>VCC_KO_4_VINO</td>\n",
       "      <td>KO</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>VCC_KO_4_VINO_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>VCC_KO_4_VINO_29102021</td>\n",
       "      <td>WT</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>VCC_KO_4_VINO_29102021_3</td>\n",
       "      <td>WT</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>VCC_WT_1_VIN</td>\n",
       "      <td>WT</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>VCC_WT_1_VIN_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>VCC_WT_1_VIN_29102021</td>\n",
       "      <td>WT</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>VCC_WT_1_VIN_29102021_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>VCC_WT_2_VIN</td>\n",
       "      <td>WT</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>VCC_WT_2_VIN_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>VCC_WT_2_VIN_29102021</td>\n",
       "      <td>WT</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>VCC_WT_2_VIN_29102021_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>VCC_WT_3_VIN</td>\n",
       "      <td>WT</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>VCC_WT_3_VIN_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>VCC_WT_3_VIN_29102021</td>\n",
       "      <td>WT</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>VCC_WT_3_VIN_29102021_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>VCC_WT_4_VIN</td>\n",
       "      <td>WT</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>VCC_WT_4_VIN_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>VCC_WT_4_VIN_29102021</td>\n",
       "      <td>WT</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>VCC_WT_4_VIN_29102021_2</td>\n",
       "      <td>WT</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>`\ "
      ],
      "text/plain": [
       "                      Sample Condition  Biological  TechRep\n",
       "0              VCC_KO_1_VINO        KO           1        1\n",
       "1            VCC_KO_1_VINO_2        KO           2        1\n",
       "2     VCC_KO_1_VINO_29102021        KO           3        1\n",
       "3   VCC_KO_1_VINO_29102021_3        KO           4        1\n",
       "4              VCC_KO_2_VINO        KO           5        1\n",
       "5            VCC_KO_2_VINO_2        KO           6        1\n",
       "6     VCC_KO_2_VINO_29102021        KO           7        1\n",
       "7   VCC_KO_2_VINO_29102021_3        KO           8        1\n",
       "8              VCC_KO_3_VINO        KO           9        1\n",
       "9            VCC_KO_3_VINO_2        KO          10        1\n",
       "10    VCC_KO_3_VINO_29102021        KO          11        1\n",
       "11  VCC_KO_3_VINO_29102021_3        KO          12        1\n",
       "12             VCC_KO_4_VINO        KO          13        1\n",
       "13           VCC_KO_4_VINO_2        WT          14        1\n",
       "14    VCC_KO_4_VINO_29102021        WT          15        1\n",
       "15  VCC_KO_4_VINO_29102021_3        WT          16        1\n",
       "16              VCC_WT_1_VIN        WT           1        1\n",
       "17            VCC_WT_1_VIN_2        WT           2        1\n",
       "18     VCC_WT_1_VIN_29102021        WT           3        1\n",
       "19   VCC_WT_1_VIN_29102021_2        WT           4        1\n",
       "20              VCC_WT_2_VIN        WT           5        1\n",
       "21            VCC_WT_2_VIN_2        WT           6        1\n",
       "22     VCC_WT_2_VIN_29102021        WT           7        1\n",
       "23   VCC_WT_2_VIN_29102021_2        WT           8        1\n",
       "24              VCC_WT_3_VIN        WT           9        1\n",
       "25            VCC_WT_3_VIN_2        WT          10        1\n",
       "26     VCC_WT_3_VIN_29102021        WT          11        1\n",
       "27   VCC_WT_3_VIN_29102021_2        WT          12        1\n",
       "28              VCC_WT_4_VIN        WT          13        1\n",
       "29            VCC_WT_4_VIN_2        WT          14        1\n",
       "30     VCC_WT_4_VIN_29102021        WT          15        1\n",
       "31   VCC_WT_4_VIN_29102021_2        WT          16        1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdata = pd.read_excel('../tests/data/proteins/general.xls', sheet_name=2)\n",
    "pdata"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Additional Informations\n",
    "User can also define and optimize some extra parameters that are in function OmicScope.\n",
    "\n",
    "1. **ControlGroup** (default = None): User can define control group ('ControlGroup=None', default) to perform comparisons against an specific group (this group have to be explicit in column Conditions on pdata table)\n",
    "\n",
    "2. **ExperimentalDesign** (default = 'static'): comparison among independent groups are called 'static' experimental design. On the other hand, if the experiment take into account several time points, than it is performing an 'longitudinal' experimental design (in this case, pdata table must present 'TimeCourse' column).\n",
    "\n",
    "3. **pvalue** (defaul = 'pAdjusted'): defines the kinds of statitics that will be used to report differentially regulated proteins, which the options are: nominal p-value ('pvalue'); Benjamini-Hochberg Adjusted p-value ('pAdjusted'); or Tukey post-hoc correction ('pTukey', just for multiple group comparisons in static experiments).\n",
    "\n",
    "4. **PValue_cutoff** (default = 0.05): Statistical cutoff to consider proteins differentially regulated. \n",
    "\n",
    "5. **FoldChange_cutoff** (default = 0): cutoff of abundance ratio to consider proteins differentially regulated. \n",
    "\n",
    "6. **logTransformed** (default = False): Usually softwares report abundance in their nominal values, requiring a log-transformation of the values. If user perform transformation before OmicScope workflow, logTransformed=True.\n",
    "\n",
    "7. **ExcludeKeratins** (default = True): Since keratins are considered sample contaminant in most studies, OmicScope can exclude than from final results.\n",
    "\n",
    "8. **degrees_of_freedom** (default = 2 ): For longitudinal analysis, users can optmize the parameters according to their studies choosing a greater degree of freedom to perform analysis."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "6caf665ad8d38b1787bfc81a3fa68fb44bba2450c9981b5affb5cd72dd9d56d1"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
